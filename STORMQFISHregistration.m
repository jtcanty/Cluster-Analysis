% John Canty                                    % Created 09/08/15
% Yildiz Lab

% Extracts a list of drift-corrected coordinates and intensity values from
% a single-cell confocal Z-stack. Also extracts the coordinates from
% analyzed telomere clusters from a STORM movie. Matches the points using non-rigid
% point-set registration.

% Function calls:
% Coherent Point Drift package
% Coherent Point Drift (CPD) Matlab package (version 2.1)
	       % Copyright (C) 2006-2009, Andriy Myronenko
%{
This package provides Matlab code with examples for 
the Coherent Point Drift (CPD) algorithm. The description of 
the CPD algorithm can be found in 

	Myronenko A., Song X.(2009), "Point-Set Registration: Coherent Point Drift.", Technical Report, OHSU 
        download at http://www.bme.ogi.edu/~myron/matlab/cpd/
%}
           
%%---------------Add function paths-------------------------------
addpath('C:\Users\TweedleDee\Documents\Projects\Q-FISH-toolbox\IF-FISH-Analysis\Functions\');
addpath(genpath('C:\Users\TweedleDee\Documents\MATLAB\CPD'));

%%---------------Extract Z-stack Ints/Coords ---------------------
% Make sure you are navigated to the Z-stack working directory
% QFISHdata = [frame, x [nm], y [nm], sigma [nm], intensity [photon],
% offset [photon], bkgstd [photon], uncertainty [nm], detections]

clear all;

[QFISHdata,~,QFISHraw] = xlsread('Zstack.xlsx');

%%----------------Extract centroid values --------------------------
% Navigate to folder containing clusters generated by STORM

STORMdata = [];

disp('Navigate to cell folder containing telomere spots');
Cellfolder = uigetdir;
cd(Cellfolder);
dirData = dir('roi*.txt');
[dirDatasort,idx] = sort_nat({dirData.name});
NumberROIfiles = length(dirDatasort);

% Iterate over roi files and create STORMdata variable
% STORMdata = [ X, Y, Number of Localizations, Ellipsoidal Volume]
for i = 1:NumberROIfiles
    ROI = dirDatasort(i);
    ROIname = ROI{1};
    if strfind(ROIname,'output')
        ROIinfo = dlmread(ROIname,'\t');
        [kmax,index] = max(ROIinfo(:,3));
        ROIdata = ROIinfo(index,:);
        % Append number of localizations from ROI excel file
        ROIname = strsplit(ROIname,'_');
        ROIexcel = strcat(char(ROIname(1)),'.xlsx');
        Exceldata = xlsread(ROIexcel,'A1:B1');
        Localizations = Exceldata(:,2);
        ROIdata = [ROIdata(1:2),Localizations];
        STORMdata = [STORMdata;ROIdata];
    else
        continue
    end
end

VolData = xlsread('ellipse_data.xlsx');
Volume = VolData(:,3);
STORMdata = [STORMdata,Volume];

%%---------------Run CPD algorithm -----------------------------
% QFISHcoords = [X coord, Y coord]
% STORMcoords = [X coord, Y coord]
QFISHcoords = QFISHdata(:,2:3); % Z-stack points in nm
STORMcoords = STORMdata(:,1:2); % STORM centroids in nm

opt.method='nonrigid';
[Transform1, C1]=cpd_register(QFISHcoords,STORMcoords, opt);title('After registering STORM coordinates to QFISH coordinates');

%Clear non-matches
brush on;
disp('Clear QFISH (red) points that do not match to STORM centroid(blue).');
pause

h = findobj(gca,'Type','line');
X1 = get(h,'Xdata');
Y1 = get(h,'Ydata');
STORMcoordsbrushed1 = [X1{1}',Y1{1}'];
QFISHcoordsbrushed1 = [X1{2}',Y1{2}'];

% Append transformed coordinates to QFISH/STORM data variables
QFISHdatabrush = [QFISHdata,QFISHcoordsbrushed1];
STORMdatabrush = [STORMdata,STORMcoordsbrushed1];

%Finds the indices of uncleared QFISH/STORM data points using 'isnan', then
%extracts the corresponding data from QFISHdata and STORMdata and stores it
%in QFISH/STORMdatamatch variable
QFISHdatamatch = QFISHdatabrush(~any(isnan(QFISHdatabrush),2),:);
STORMdatamatch = STORMdatabrush(~any(isnan(STORMdatabrush),2),:);

% Updated QFISH/STORMcoordsbrushed variables in place to remove brushed
% objects
QFISHcoordsbrushed1 = QFISHdatamatch(:,10:11);
STORMcoordsbrushed1 = STORMdatamatch(:,5:6);

% Repeat registration to confirm matching
close all

opt.method='nonrigid';
[Transform2, C2]=cpd_register(QFISHcoordsbrushed1,STORMcoordsbrushed1, opt);title('After registering STORM coordinates to QFISH coordinates');
savefig('STORM/QFISH registration');

h = findobj(gca,'Type','line');
X2 = get(h,'Xdata');
Y2 = get(h,'Ydata');

% Replace new normalized coordinates from second registration
STORMcoordsbrushed2 = [X2{1}',Y2{1}'];
QFISHcoordsbrushed2 = [X2{2}',Y2{2}'];

QFISHdatamatch = [QFISHdatamatch(:,[1:9]),QFISHcoordsbrushed2];
STORMdatamatch = [STORMdatamatch(:,[1:4]),STORMcoordsbrushed2];

close all
%%---------------Match STORM and QFISH coordinates---------------------
% Calculate Euclidean distances for each point
% TelomereData = [X_STORMoriginal,Y_STORMoriginal,X_STORMnorm,Y_STORMnorm,Localizations,Volume,X_QFISHoriginal,Y_QFISHoriginal,X_QFISHnorm,Y_QFISHnorm, Intensity (photons)] 
TelomereData = [];

NumMatched = size(STORMdatamatch,1);
% Iterate over Z-stack coordinates
for j = 1:NumMatched
    % norm array of Z-stack coordinates to all STORM coordinates. Arrays
    % should be the same size if all non-matches have been cleared.
    norm = sqrt((QFISHdatamatch(:,10)-STORMdatamatch(j,5)).^2 + (QFISHdatamatch(:,11)-STORMdatamatch(j,6)).^2);
    % find min norm
    [min_norm,index] = min(norm);
    if min_norm < 0.05
        ROIdata = [STORMdatamatch(j,[1:2,5:6,3:4]),QFISHdatamatch(index,[2:3,10:11,5])];
        TelomereData = [TelomereData;ROIdata];
    else
        continue
    end
end

pause
%%-------------Generate correlation plot--------------------------%%
x3 = TelomereData(:,5);
y3 = TelomereData(:,11);
figure(2);
scatter(x3,y3,'filled');
xlabel('Localizations');
ylabel('Intensity');

x4 = TelomereData(:,6);
y4 = TelomereData(:,11);
figure(3);
scatter(x4,y4,'filled')
xlabel('Volume');
ylabel('Intensity');

% Arbitrary intensity
vol_data = TelomereData(:,6);
int = TelomereData(:,11);
density = int./vol_data;

 
% Plot correlation coefficients
R3 = corrcoef(x3,y3);
num2str(R3(1,2));
display(strcat('The localizations vs intensity R-value is: ',num2str(R3(1,2))))
savefig('LocalizationsvsIntensity_correlation');

R4 = corrcoef(x4,y4);
num2str(R4(1,2));
display(strcat('The volume vs. intensity R-value is: ',num2str(R4(1,2))))
savefig('VolumevsIntensity_correlation');

% Save intensity and volume data
header = {'X_STORM','Y_STORM','X_STORMnorm','Y_STORMnorm','Localizations','Ellipsoidal Volume','X_QFISH','Y_QFISH','X_QFISHnorm','Y_QFISHnorm','Intensity'};
TelomereDataFile = num2cell(TelomereData);
all_data = [header;TelomereDataFile];
xlswrite('matchedpts.xls',all_data);




